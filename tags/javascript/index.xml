<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on kaola </title>
    <link>https://blog.kaolafed.com/tags/javascript/index.xml</link>
    <language>en-us</language>
    <author>Alexander Ivanov</author>
    <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>
    
    <item>
      <title>impress.js调研报告</title>
      <link>https://blog.kaolafed.com/post/impress.js%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Thu, 17 Dec 2015 17:43:04 &#43;0800</pubDate>
      <author>Alexander Ivanov</author>
      <guid>https://blog.kaolafed.com/post/impress.js%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/</guid>
      <description>

&lt;h1 id=&#34;impress-js调研报告&#34;&gt;impress.js调研报告&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;by &lt;a href=&#34;https://tianyn1990.github.io&#34;&gt;tianyn1990&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在开始阅读本文之前，你至少应该打开官网的&lt;a href=&#34;http://impress.github.io/impress.js&#34;&gt;例子&lt;/a&gt;看看，并且&lt;a href=&#34;https://github.com/stefina/impressJS&#34;&gt;下载代码&lt;/a&gt;到本地跑跑 :-)&lt;/p&gt;

&lt;p&gt;在阅读过程中，强烈建议阅读的同时不断查看源码，不断对照官网提供的&lt;a href=&#34;http://impress.github.io/impress.js&#34;&gt;例子&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-命名&#34;&gt;一、命名&lt;/h2&gt;

&lt;p&gt;根据页面结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    body --
         |
      div#impress --
                  |
                div.step
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了方便理解，我们约定：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;文中简称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;对应节点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;「PPT」&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lt;div id=impress&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;「Page」&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lt;div class=&amp;ldquo;step&amp;rdquo;&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;二-什么是-相关项目-知识&#34;&gt;二、什么是&amp;amp;相关项目&amp;amp;知识&lt;/h2&gt;

&lt;h3 id=&#34;1-impress-js简介&#34;&gt;1、impress.js简介&lt;/h3&gt;

&lt;h3 id=&#34;2-相关项目&#34;&gt;2、相关项目&lt;/h3&gt;

&lt;p&gt;官方总结的相关项目和例子在&lt;a href=&#34;https://github.com/impress/impress.js/wiki/Examples-and-demos&#34;&gt;这里&lt;/a&gt;。包含：工具、插件、demo等。比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「插件」：显示演示文稿的进度条  &lt;a href=&#34;https://github.com/m42e/impress.js-progress&#34;&gt;链接&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;「工具」：快速构建基于impressJs的演示文稿  &lt;a href=&#34;http://strut.io/&#34;&gt;链接&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外还有很多&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;3-需要提前了解&#34;&gt;3、需要提前了解&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;perspective &amp;amp; transform-style：&lt;a href=&#34;https://developer.mozilla.org/en/CSS/perspective&#34;&gt;文档1&lt;/a&gt;、&lt;a href=&#34;http://www.w3cplus.com/css3/transform-basic-property.html&#34;&gt;文档2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;三-如何使用&#34;&gt;三、如何使用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;唯一限制你的是&lt;strong&gt;想象力&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-页面元素&#34;&gt;1、页面元素&lt;/h3&gt;

&lt;h4 id=&#34;各元素介绍&#34;&gt;各元素介绍&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;body：在不同状态下有不同的class属性值&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;浏览器兼容：class=&amp;lsquo;impress-enabled&amp;rsquo;&lt;/li&gt;
&lt;li&gt;浏览器不兼容：class=&amp;lsquo;impress-not-supported&amp;rsquo;，如果在初始状态下就赋该值，可以使禁止了js的客户端用户仍可以看到有意义的信息&lt;/li&gt;
&lt;li&gt;当页面进入到某个「Page」（指演示文稿的一页，body&amp;gt;#impress&amp;gt;.step），如果该「Page」有id=&amp;lsquo;p1&amp;rsquo;，那么body上会生成class=&amp;rsquo;&lt;strong&gt;impress-on-p1&lt;/strong&gt;&amp;lsquo;。&lt;strong&gt;不同的class代表了不同的「状态」，这样我们可以非常方便的控制每个「Page」下的样式&lt;/strong&gt;。另外，如果某个Page没有设置id，那么对应body上class为：impress-on-step-「Page的序号，从1开始」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;body&amp;gt;#impress&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下文称div#impress为「PPT」，「PPT」为impress.js的核心，所有的「Page」（class=&amp;lsquo;step&amp;rsquo;）都放在它里面&lt;/li&gt;
&lt;li&gt;id值当然是可配置的（默认&amp;rdquo;impress&amp;rdquo;）：&lt;code&gt;impress(&#39;id&#39;).init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可选属性：data-transition-duration=&amp;ldquo;1000&amp;rdquo;，表示页面切换动画用时1000ms（默认1000ms）&lt;/li&gt;
&lt;li&gt;可选属性：data-perspective=&amp;ldquo;1000&amp;rdquo;（默认1000像素），表示perspective（我一般理解为&lt;strong&gt;视距&lt;/strong&gt;，即人眼离画布的距离）值为1000px，用来表现3D效果。如果不希望使用3D可设值为0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;body&amp;gt;#impress&amp;gt;.step（简称「Page」）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所有#impress的子元素都必须设置class=&amp;lsquo;step&amp;rsquo;&lt;/li&gt;
&lt;li&gt;文中所说的「Page」均指的是「#impress元素」下的「.step元素」，每个「Page」均表示演示文稿中的一页&lt;/li&gt;
&lt;li&gt;通过在该节点上配置各种属性，我们就可以得到一个具有不同大小、位置、3D切换效果的演示文稿了，这些配置有 &lt;strong&gt;重点&lt;/strong&gt;：

&lt;ul&gt;
&lt;li&gt;data-x，data-y：如果将整个页面比作一个巨大的画布，那么我们需要确定每一个Page在这张画布上的具体位置。这两个属性指明了Page的&lt;strong&gt;「中心」&lt;/strong&gt;的x,y坐标。注意：&lt;strong&gt;值可以是负的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;data-scale：该属性表示Page的「缩放倍数」，设置了该属性的Page大小是「标准」（step上设置的width,height）的N倍，也就是长宽属性是标准Page的N倍。在画布上所占面积也当然有所不同。注意：&lt;strong&gt;值可以为小数，表示缩小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;data-rotate：相当于为Page设置了样式transform:rotate(**deg)，表示对Page进行了旋转。该属性的值为角度数，当然可以为负值&lt;/li&gt;
&lt;li&gt;data-z：&lt;em&gt;「页面终于酷炫起来了」&lt;/em&gt; Page终于被赋予了3D属性。通过沿着z轴移动，拉近/远离了屏幕，相当于样式transform:translateZ(**px)，再结合#impress上的data-perspective，最终产生3D效果╮(╯_╰)╭&lt;/li&gt;
&lt;li&gt;data-rotate-x，data-rotate-y：不仅距离上可以对Page进行3D移动，还可以将Page进行x,y轴向的旋转操作，另外z轴的旋转就是前面的data-rotate。&lt;strong&gt;记：分别从上、左、正面看一个物体，顺时针方向就分别是y轴、x轴、z轴旋转的「正方向」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;做个总结吧：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data-x&lt;/code&gt;, &lt;code&gt;data-y&lt;/code&gt;, &lt;code&gt;data-z&lt;/code&gt;：定义了Page的&lt;strong&gt;中心&lt;/strong&gt;在三维空间的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-rotate-x&lt;/code&gt;, &lt;code&gt;data-rotate-y&lt;/code&gt;, &lt;code&gt;data-rotate-z&lt;/code&gt;, &lt;code&gt;data-rotate&lt;/code&gt;：定义了Page沿x/y/z轴的旋转角度，「data-rotate-z」与「data-rotate」完全一致&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-scale&lt;/code&gt;：定义了Page的缩放倍数，值为小数表示缩小&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;预览功能：impress.js并没有直接提供「预览所有Page」的功能，但我们可以通过新建一个Page并设置特殊的属性值，很容易的实现。步骤如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;增加一个Page，设置id=overview（当然别的也可以）&lt;/li&gt;
&lt;li&gt;计算「整个画布」所有Page在一起大概的宽高值（在排列各个Page的大小位置的时候，你最好画个草图），假设为：约6000px * 约3000px&lt;/li&gt;
&lt;li&gt;设置Page#overview的属性：data-x=3000,data-y=1500，也就是把#overview这个Page放到画布中央&lt;/li&gt;
&lt;li&gt;找一个合适的放大倍数，将#overview这个Page的大小覆盖到整个画布，假设没有缩放的Page宽高为900px,700px，你可以大概放大10倍：data-scale=10&lt;/li&gt;
&lt;li&gt;设置#overview相应的样式（详见下文），如：.impress-on-overview{ display: none } 等（因为我们不希望#overview遮盖到其他的Page）&lt;/li&gt;
&lt;li&gt;这样，当访问到#overview这个「Page」的时候，就可以&lt;strong&gt;预览&lt;/strong&gt;到整个画布（PPT）了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-不同状态下页面元素分析&#34;&gt;2、不同状态下页面元素分析：&lt;/h3&gt;

&lt;h4 id=&#34;状态1-静态页面&#34;&gt;状态1：静态页面&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;body.impress-not-supported&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;
&amp;lt;body class=&amp;quot;impress-not-supported&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「PPT」div#impress&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;
&amp;lt;div id=&amp;quot;impress&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「Page」div.step&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;
&amp;lt;div class=&amp;quot;step&amp;quot; data-x=&amp;quot;0&amp;quot; data-y=&amp;quot;0&amp;quot;...&amp;gt;
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;状态2-浏览器加载页面&#34;&gt;状态2：浏览器加载页面&lt;/h4&gt;

&lt;p&gt;浏览器执行代码：&lt;code&gt;impress().init();&lt;/code&gt; 之后，如果浏览器支持impressJs，那么：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;body的class增加「.impress-supported」与「.impress-enabled」，并删除「.impress-not-supported」&lt;/li&gt;
&lt;li&gt;#impress的所有子节点「所有Page」，会被一个div包裹，页面结构变为：body&amp;gt;#impress&amp;gt;div&amp;gt;.step&lt;/li&gt;
&lt;li&gt;根据我们在「PPT」「Page」上设置的各种属性值（以及Page的width&amp;amp;height属性，页面的宽高等），计算得出一些样式（后面详述），分别赋值到body、#impress（PPT）、.step（Page）上&lt;/li&gt;
&lt;li&gt;框架会默认跳转到第一个Page：

&lt;ul&gt;
&lt;li&gt;根据第一个Page的id值，假设为&lt;code&gt;p1&lt;/code&gt;，修改地址栏哈希值为：&lt;code&gt;/p1&lt;/code&gt;，如果Page没有id属性，那么根据页面顺序，地址栏哈希值为：&lt;code&gt;/step-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有Page（.step）增加class：「.future」&lt;/li&gt;
&lt;li&gt;第一个Page（.step）增加class：「.active」表示为展示中状态，500ms（默认500ms，可由#impress上的data-transition-duration属性修改）之后，「.future」变为「.present」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;状态3-访问下一个page&#34;&gt;状态3：访问下一个Page&lt;/h4&gt;

&lt;p&gt;当用户点击空格或者方向键（右/下）之后，进入下一个Page（#impress .step:nth-child(2)）。
当访问到第二个Page之后，第一个Page的class「.present」变为「.past」，并删除「.active」。
第二个Page的class先增加「.active」，500ms后，class「.future 或者 .past」变为「.present」，并且地址栏哈希值变为第二个Page的id值或者&lt;code&gt;/step-2&lt;/code&gt;，&lt;/p&gt;

&lt;h4 id=&#34;future-present-past&#34;&gt;.future-&amp;gt;.present-&amp;gt;.past&lt;/h4&gt;

&lt;p&gt;future：未曾访问过的Page&lt;/p&gt;

&lt;p&gt;present：正在访问的Page（同时该页面还会有class「.active」）&lt;/p&gt;

&lt;p&gt;past：访问过的Page（只要曾经访问过，那么就是.past，当第二遍浏览到某个Page时，那么该Page的class为「.past,.active」）&lt;/p&gt;

&lt;p&gt;另外，当页面切换时，「.active」会立即生效，但「.future/.past -&amp;gt; .present」会在500ms后发生切换&lt;/p&gt;

&lt;h3 id=&#34;3-自定义css&#34;&gt;3、自定义css&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;「来自&lt;a href=&#34;https://github.com/stefina/impressJS/blob/master/css/impress-demo.css&#34;&gt;impress-demo.css&lt;/a&gt;中的注释，其实直接看这个文件也许更清楚」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Impress.js不调用任何外部的样式文件，&lt;strong&gt;JS会生成「动画所需」的所有样式&lt;/strong&gt;。
官方提供的&lt;a href=&#34;https://github.com/stefina/impressJS/blob/master/css/impress-demo.css&#34;&gt;impress-demo.css&lt;/a&gt;样式文件是为了演示用的，阅读它可以明白如何对impress.js中的元素进行渲染。具体内容如下：&lt;/p&gt;

&lt;h4 id=&#34;页面级&#34;&gt;页面级&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;你喜欢的reset和global样式&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「.fallback-message」：若浏览器不兼容impress.js则展示此部分内容
同时需要声明：（浏览器支持impress.js时隐藏）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    .impress-supported .fallback-message {
        display: none;
    }

    .fallback-message {
        /* 不兼容时的样式 */
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;page级&#34;&gt;Page级&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;「.step」：需要指定width，该宽度会用于代入公式进行计算，
影响「Page看起来的大小」的因素有：#impress上缩放比例(scale)、.step宽高值(width)、3D透视属性（perspective,translateZ）等（下文会详述）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    .step {
        position: relative;
        width: 900px;
        height: 600px;
        /* etc.. */
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;「.impress-enabled .step」-非当前Page的样式，参考：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    .impress-enabled .step {
        margin: 0;
        opacity: 0.3;
        transition: opacity 1s; /* prefix */
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;「.impress-enabled .step.active」-当前Page样式：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    /* 当前Page */
    .impress-enabled .step.active { opacity: 1 }

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;单张page&#34;&gt;单张Page&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;（使用「Page的id属性」或者「body上的class的impress-on-**」区分作用域）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;修改Page大小，修改样式：width,transform:translateZ&lt;/li&gt;
&lt;li&gt;Page上class可能取值：「.future」「.present」「.past」「.active」：（静态页面上class=&amp;lsquo;step&amp;rsquo;）

&lt;ul&gt;
&lt;li&gt;Page未曾被访问过，class为：  「step future」&lt;/li&gt;
&lt;li&gt;刚刚转至某个Page，class为：  「step future active」&lt;/li&gt;
&lt;li&gt;转到某Page,500ms后，class为：「step present active」&lt;/li&gt;
&lt;li&gt;离开某Page，class为：       「step past」&lt;/li&gt;
&lt;li&gt;再次进入某Page，class为：    「step past active」&lt;/li&gt;
&lt;li&gt;再次进入某Page,500ms后，为： 「step present active」&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此我们可以通过这4种class，定制不同状态下的不同展示效果&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果Page内部元素需要使用3D，那么记得要设置「transform-style:preserve-3d」，并且由于「3D transform标准」并不是十分明确，所以必须声明所有的&lt;strong&gt;-prefix-&lt;/strong&gt;（&amp;gt;=IE10兼容，且基本都需要加前缀）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;别忘了最后增加一个「.step」用来负责预览所有Page，比如官方例子中设置了「id=overview」，相应的body上会增加class：impress-on-overview，因此设置样式如下：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    //防止预览时#overview遮住其他Page
    #overview {
        display:none
    }
    //设置预览时其它Page的样式
    .impress-on-overview .step {
        opacity: 1;
        cursor: pointer;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;作者的其它样式&#34;&gt;作者的其它样式&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;作者发现的一个bug：有时候（chrome等部分浏览器部分版本）进行过3D变换的元素（尤其是沿z轴负方向移动的）会不可点击，原因是它们跑到了body后面。为了避免这个问题，
作者使用了「&lt;a href=&#34;https://developer.mozilla.org/en/CSS/pointer-events&#34;&gt;pointer-events: none&lt;/a&gt;」(IE11以上支持，在作者的努力下impress.js继续缩小了支持范围真是太棒了)，
使用原则是：设置「除#impress元素以外」的所有元素均不可点击，如：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    .impress-enabled          { pointer-events: none }
    .impress-enabled #impress { pointer-events: auto }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;作者写了一个「.hint」，目的是告知第一次使用演示文稿的同学如何操作，纯样式实现，没啥可说的（不过作用在body上的pointer-events属性让它也不可点击了）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;四-基本实现原理-重要&#34;&gt;四、基本实现原理&lt;strong&gt;「重要」&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;1-如何使用css构建一个3d环境&#34;&gt;1、如何使用CSS构建一个3D环境&lt;/h3&gt;

&lt;p&gt;你需要3层div，我们可以任性的分别取名为：#impress&amp;gt;#canvas&amp;gt;.step&lt;/p&gt;

&lt;p&gt;第一层#impress需要至少需要赋予属性值perspective:***px，以及perspective-origin。perspective可以理解为「视距」（虽然中文意思是：透视，视角，
完全不明白的同学可以参考&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/?p=2592&#34;&gt;这篇&lt;/a&gt;，或者其他优秀文章），也就是眼睛距离屏幕的距离（z轴）。
perspective-origin指的是眼睛的方位（x,y轴）。这两个值确定了眼睛和屏幕的三维位置关系（xyz）（不了解「眼睛」有啥作用的话请继续看下文）。&lt;/p&gt;

&lt;p&gt;第二层#canvas，顾名思义可以称作「画布」，因为所有具体展现出来的的3D元素(.step)都包含在它内部。
它至少必须设置样式transform-style:preserve-3d，但这个样式为了保险，一般可以设置到这3层中的所有节点上。&lt;/p&gt;

&lt;p&gt;第三层.step，它就可以有很多兄弟节点了，这些节点通过设置translate:translate3d() rotate3d() scale()等等样式来定位自己在三维环境中的位置。
其中最关键的就是z轴的距离（translateZ），它定义了图形距离屏幕的距离。通过这个距离，以及在#impress中设置的「眼睛」距离屏幕的距离，我们可以画一个「从眼睛到图形的锥形」，
而「锥形与屏幕相交」的位置就是这个.step图形在屏幕上呈现的大小了。这么说不是太具体，请看下图（要是弄成可拖动带交互效果的就好了&amp;hellip;）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../images/perspective.jpg&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上面两张图中的画的眼睛可以理解为观察者的位置，那面白板可以看做是电脑屏幕，眼睛到白板的距离d就是perspective的值。虚线组成的圆形就是我们希望展示到页面上的图形（impress.js中就是Page）。由这个图形和观察者的眼睛组成的「视锥」投影到屏幕（白板）上的大小，就是屏幕最终展示的图形大小。而大量图形都通过这种方式呈现到屏幕上以后，图形之间就呈现了三维的视觉联系。&lt;/p&gt;

&lt;p&gt;完整的例子可以参考我的&lt;a href=&#34;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%AD%A3%E6%96%B9%E4%BD%93.html&#34;&gt;这个栗子&lt;/a&gt;，以及&lt;a href=&#34;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC.html&#34;&gt;这个&lt;/a&gt;，还有&lt;a href=&#34;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E7%BF%BB%E4%B9%A6.html&#34;&gt;这个&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-impress-js的切换动画&#34;&gt;2、impress.js的切换动画&lt;/h3&gt;

&lt;p&gt;impress.js之所以这么awesome，最主要的就是各个Page之间的切换动画。每个Page都是上文中的第三层（.step），由于每个Page都会根据设置的各种属性值，被放置在三维环境中的某个位置，
它可能被放大、距离屏幕有一段距离、甚至xyz轴都进行了旋转，但我们必须从一个Page动态的切换到另一个Page，那么到底如何切换呢？（假设我们要从Page1切换到Page2）&lt;/p&gt;

&lt;p&gt;首先我们要通过对第二层#canvas进行各种3D/2D变换，来抵消Page2的各种3D/2D变换，比如Page2沿z轴旋转了90deg，那么#canvas则要沿z轴旋转-90deg进行抵消。
就像在玩儿魔方一样，Page相当于魔方的每一个小块，而#canvas相当于魔方本身，我们可以通过旋转和平移魔方的方式将魔方的任意一个小块移动到我们的「正前方」，
同样的道理，我们可以通过将整个画布进行各种3D/2D的变换，来把某一个Page移动到我们的正前方。但要注意的是，我们不进行缩放（scale）。&lt;/p&gt;

&lt;p&gt;虽然Page2已经移动到屏幕的正前方了，但如果Page2放大了2倍（data-scale=2），那么我们接下来要抵消它，我们可以通过在#impress上设置样式transform:scale(.5)来反向的缩小2倍，
同时为了保证「视距」（眼睛到屏幕的距离）在缩放后依然保持不变，我们还要将#impress上的perspective属性除以2。&lt;/p&gt;

&lt;p&gt;再通过在#impress和#canvas上设置transition来实现切换的动画效果&lt;/p&gt;

&lt;p&gt;最后需要注意的是，为了使切换尽可能的美观，#impress对「镜头」的拉近远离操作，以及#canvas对「镜头」的旋转平移3d变换操作，它们两者的先后顺序不是一成不变的，基本的原则是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果#impress需要对物体进行拉近操作（拉近操作：Page2的data-scale比Page1的大，那么由Page1切换到Page2就是拉近操作），那么就先操作#canvas，再操作#impress进行放大；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果#impress需要对物体进行拉远操作，那么需要先操作#impress进行拉远操作，再进行#canvas的变换操作。这样就可以看到#canvas变换时，Page2发生的各种变换的全过程！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;五-项目中如何用-借鉴价值&#34;&gt;五、项目中如何用&amp;amp;借鉴价值&lt;/h2&gt;

&lt;h3 id=&#34;问题&#34;&gt;问题：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;兼容性非常差，需要&amp;gt;=IE10，且IE全都不支持transform-style:preserve-3d&lt;/li&gt;
&lt;li&gt;移动端展示效果还有待更全面的测试，而作者完全弃用了移动端，虽然作者在开发代码之后的几年移动端性能进步很大，但根据其它项目经验来看在大量3D元素的情况下至少低端机帧率会降低很多，用户体验差的话还不如不用，比如&lt;a href=&#34;https://tianyn1990.github.io/dist/views/ppt/ppt.html#/beach&#34;&gt;这个&lt;/a&gt;，其实也做了手机的适配，但效果就&amp;hellip;&lt;/li&gt;
&lt;li&gt;需要有一定的改造成本和测试成本，这个框架可能不适合直接使用，需要定制化&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;优势&#34;&gt;优势：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;的确很酷炫啊有木有&lt;/li&gt;
&lt;li&gt;兼容和移动端问题，可以仅仅针对部分使用现代PC浏览器的用户提供一个非常酷炫的页面，类似天猫双十一期间的一些游戏和canvas活动页&lt;/li&gt;
&lt;li&gt;移动端的话也不是不能用，可以使用它的这种设计思想，进行canvas改造，完全使用canvas实现，这的确需要一部分成本，但效果和性能都是值得期待的&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;借鉴&#34;&gt;借鉴：&lt;/h3&gt;

&lt;p&gt;impress.js的酷炫效果源于将平面页面（PPT）的各个部分（Page）拆分出来，然后三维化了（可近可远、可斜可转、甚至可以在你后面）。
借鉴这种思想，打开脑洞：当你点击页面上一个人头像的小图标之后，屏幕会拉近那个头像图标并最终进入到它的内部，（eng二声），
那里会出现另一个页面，就是那个头像对应的人的主页。如果单页面应用做成这样，光是想想就有点小激动呢~~~~~~&lt;/p&gt;

&lt;h2 id=&#34;六-结语&#34;&gt;六、结语&lt;/h2&gt;

&lt;p&gt;本文的语言还需要再进行梳理，有些内容自己理解了但没讲清楚，而有些内容有可能讲的过细。&lt;/p&gt;

&lt;h2 id=&#34;附-代码详细分析-未完成&#34;&gt;附：代码详细分析（未完成..）&lt;/h2&gt;

&lt;h3 id=&#34;1-解决兼容性&#34;&gt;1、解决兼容性&lt;/h3&gt;

&lt;p&gt;为了解决「不同浏览器中，给DOM赋予内联样式的兼容性问题」，作者首先参考&lt;a href=&#34;https://modernizr.com/&#34;&gt;Modernizr&lt;/a&gt;写了一个功能函数，见下方代码，值得认真读一下&lt;/p&gt;

&lt;p&gt;注：&lt;a href=&#34;https://github.com/Modernizr/Modernizr&#34;&gt;Modernizr github&lt;/a&gt;项目用于检测HTML5 &amp;amp; CSS3新特性是否适用于浏览器，你可以在css以及js中使用它，详见&lt;a href=&#34;https://modernizr.com/docs/&#34;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原理：创建一个Element元素，假设命名为dummy，如果希望赋值「style=&amp;lsquo;width:100px&amp;rsquo;」，那么分别检测dummy.style是否包含如下属性之一：width,WebkitWidth,MozWidth,OWidth,msWidth,KhtmlWidth。
如果dummy.style中存在其中的某个属性，比如WebkitWidth存在，那么赋值dummy.style.WebkitWidth=&amp;lsquo;100px&amp;rsquo;，并且将这个属性记录下来，以便下次调用时直接使用。&lt;/p&gt;

&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /**
     * 解决不同浏览器中，给DOM赋予内联样式的兼容性问题
     *
     * @param prop {String} css属性，注意如果属性由横线「-」链接，请改为驼峰式
     *                      比如mozilla内核独有css：-moz-box-pack，你需要这样使用：
     *
     *         ````
     *         //代码在火狐浏览器下返回「MozBoxPack」，你可以调用element.style.MozBozPack来为该属性赋值
     *         var pkey = pfx(&#39;boxPack&#39;);
     *
     *         ````
     * @returns {string/Null} 当前浏览器下，element.style中的对应属性；如果当前浏览器不支持，则返回null
     */
    var pfx = (function () {

            var style = document.createElement(&#39;dummy&#39;).style,
                prefixes = &#39;Webkit Moz O ms Khtml&#39;.split(&#39; &#39;),
                memory = {};

            return function ( prop ) {
                if ( typeof memory[ prop ] === &amp;quot;undefined&amp;quot; ) {

                    var ucProp  = prop.charAt(0).toUpperCase() + prop.substr(1),
                        props   = (prop + &#39; &#39; + prefixes.join(ucProp + &#39; &#39;) + ucProp).split(&#39; &#39;);

                    memory[ prop ] = null;
                    for ( var i in props ) {
                        if ( style[ props[i] ] !== undefined ) {
                            memory[ prop ] = props[i];
                            break;
                        }
                    }

                }

                return memory[ prop ];
            };

        })();

    //另一个例子：
    var setStyle = function (elem, key, val){
        var pkey = pfx(key);
        if(pkey) {
            elem.style[pkey] = val;
        }
    };

    setStyle(someElem, &#39;width&#39;, &#39;100px&#39;);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-各种功能函数&#34;&gt;2、各种功能函数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;array-like -&amp;gt; Array&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    // `arraify` takes an array-like object and turns it into real Array
    // to make all the Array.prototype goodness available.
    var arrayify = function ( a ) {
        return [].slice.call( a );
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将array-like对象转换成Array类型，使对象拥有数组的各种方法，便于各种操作。其实应该缓存「[]」，不是因为内存消耗，而是每次调用会增加一次创建数组对象的时间。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;批量设置内联样式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    // `css` function applies the styles given in `props` object to the element
    // given as `el`. It runs all property names through `pfx` function to make
    // sure proper prefixed version of the property is used.
    var css = function ( el, props ) {
        var key, pkey;
        for ( key in props ) {
            if ( props.hasOwnProperty(key) ) {
                pkey = pfx(key);
                if ( pkey !== null ) {
                    el.style[pkey] = props[key];
                }
            }
        }
        return el;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;批量设置内联样式，它内部当然使用的是pfx函数了，由于props参数是{}对象，因此要hasOwnProperty&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;选择器：
var byId = function ( id ){&amp;hellip;}：document.getElementById(id)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;var $ = function ( selector, context ){&amp;hellip;}：context.querySelector(selector); 返回对象&lt;/p&gt;

&lt;p&gt;var $$ = function ( selector, context ){&amp;hellip;}：arrayify( context.querySelectorAll(selector) ); 返回数组&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自定义事件：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    // `triggerEvent` builds a custom DOM event with given `eventName` and `detail` data
    // and triggers it on element given as `el`.
    var triggerEvent = function (el, eventName, detail) {
        var event = document.createEvent(&amp;quot;CustomEvent&amp;quot;);
        event.initCustomEvent(eventName, true, true, detail);
        el.dispatchEvent(event);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个待我慢慢道来。首先根据&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events&#34;&gt;Creating and triggering events&lt;/a&gt;
中的分类，类似作者的这种自定义事件方式，属于过时的方法，在最新的规范中已经被剔除，使用该方案而没有做兼容判断的js随时可能报错（虽然如果想兼容IE的话就必须用这种方式），这个所谓的过时方法举例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // 为了这个栗子，首先得有一个Element
    var elem = document.querySelector(&#39;body&#39;);

    // 第一步：创建事件对象

    // 创建一个Event对象
    var event = document.createEvent(&#39;HTMLEvents&#39;);

    // 第二步：初始化事件对象

    // 定制化Event对象的各种参数：名称为「build」（因此为自定义事件）、可以bubble、允许cancel
    event.initEvent(&#39;build&#39;, true, true);

    // 第三步：注册事件：

    // 向某个Element注册build事件
    elem.addEventListener(&#39;build&#39;, function (e) {
        console.log(e.target);
        console.log(e.detail);
    }, false);

    // 第四步：触发事件

    // 使用js触发（自定义事件当然用js触发了）某个Element上自定义的事件event（名称「build」，可bubble，可cancel）
    elem.dispatchEvent(event);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总结一下就是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;步1+步2：创建（createEvent）&amp;amp;初始化（initEvent）事件对象。通过这两步，你会得到一个Event对象。创建事件时的参数是&amp;rsquo;HTMLEvents&amp;rsquo;，这样会得到一个Event对象，
如果使用&amp;rsquo;MouseEvents&amp;rsquo;作为参数，那么得到的是一个MouseEvent对象，而MouseEvent对象初始化的时候需要使用&amp;rsquo;initMouseEvent&amp;rsquo;函数，它们都属于规范「&lt;a href=&#34;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings&#34;&gt;DOM Level 2 Events&lt;/a&gt;」。
这种对应关系：「HTMLEvents &amp;lt;-&amp;gt; event.initEvent()」「MouseEvents &amp;lt;-&amp;gt; event.initMouseEvent()」，可以参考：&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent#Notes&#34;&gt;MDN createEvent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;步3：这不重要不是么，无论是否注册了事件，你都可以触发它，也就是没有任何意义罢了，如果兼容IE67记得用attachEvent ：）&lt;/li&gt;
&lt;li&gt;步4：触发事件的时候，如果在初始化的时候的第二个参数是true，那么它就会向父节点冒泡，如果父节点也注册了&amp;rsquo;build&amp;rsquo;事件，那么也会触发回调函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你一定注意到了在作者的代码中创建事件的时候使用的参数是：&amp;rdquo;CustomEvent&amp;rdquo;，这样会生成一个CustomEvent对象，这个对象对应的初始化方法为：event.initCustomEvent()，它与initEvent的不同之处在于可以传第4个参数，该参数是一个对象{}，它会在addEventListener注册事件的时候传到回调函数的参数中，你可以在evt.detail中访问到：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ...
    event.initCustomEvent(&#39;build&#39;, true, true, {&amp;quot;k&amp;quot;:&amp;quot;v&amp;quot;});
    elem.addEventListener(&#39;build&#39;, function (e) {
        console.log(e.detail);//{&amp;quot;k&amp;quot;:&amp;quot;v&amp;quot;}
    }, false);
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&amp;rsquo;CustomEvent&amp;rsquo;需要&amp;gt;=IE9才支持，且「不完全支持」，因为CustomEvent的另一种用法，也就是新的规范中建议的用法：「使用new CustomEvent(&amp;hellip;)来同时完成创建和初始化两步」，IE&lt;strong&gt;全都不支持&lt;/strong&gt; :(&lt;/p&gt;

&lt;p&gt;下面举个栗子来说明一下用法吧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //原来是这样写的
    var event = document.createEvent(&#39;CustomEvent&#39;);
    event.initCustomEvent(&#39;build&#39;, true, true, {&amp;quot;k&amp;quot;:&amp;quot;v&amp;quot;});

    //新规范要求这样写（IE全都不支持，不支持!）
    event = new CustomEvent(&#39;build&#39;, {bubbles: true, cancelable: true, detail: {&amp;quot;k&amp;quot;:&amp;quot;v&amp;quot;}});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以写一个&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill&#34;&gt;polyfill&lt;/a&gt;合并前两种情况，这样就兼容所有&amp;gt;=IE9了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    (function () {
      function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent( &#39;CustomEvent&#39; );
        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
        return evt;
       }

      CustomEvent.prototype = window.Event.prototype;

      window.CustomEvent = CustomEvent;
    })();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你还想了解事件对象Event的各种参数（如：target,currentTarget,timeStamp,type,isTrusted&amp;hellip;）和方法（如：&amp;hellip;），请参考&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然，由于以上的种种原因，以及为了获得更灵活的控制，很多框架中常常自己实现一套事件系统，甚至还可以使用发布-订阅模型等等，&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/?p=2330&#34;&gt;这里&lt;/a&gt;是张鑫旭大大多年前的简单实现以及讲解，
其实就是把创建的自定义事件和回调函数按照对应关系放到一个js对象中进行管理，我就不用再啰嗦了 (^o^)&lt;/p&gt;

&lt;p&gt;由作者的功能函数中的事件函数引发的一些说明暂时就到这里，下面继续看作者写的功能函数代码：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;computeWindowScale&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先上代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var computeWindowScale = function ( config ) {

        // 计算出window的宽高分别与config参数之间的比值，这个比值最终会应用在PPT（body&amp;gt;div#impress）节点上，
        // 最终保证每一页演示文稿（Page）呈现到浏览器窗口中都「看起来一样大」
        var hScale = window.innerHeight / config.height,
            wScale = window.innerWidth / config.width,

            /* 最终的整体缩放比例取宽高比值中较小的一个，举个栗子说明下原因：
             假如某一页文稿（Page）非常的长（width:1000px; height:3000px;），window的宽高为：width:1000px; height:500px;
             那么最终采用的比值scale是 window.innerHeight/config.height = 1/6
             这个值比较小，那么整个PPT将会被设置：transform:scale(0.166667)，被整体缩小为1/6，
             这样就可以把这个高度很大的Page完整的呈献给用户了（作者的最终目的）
             */
            scale = hScale &amp;gt; wScale ? wScale : hScale;

        // 同时作者还设置了一个最大最小scale，用来处理异常参数，基本用不上
        if (config.maxScale &amp;amp;&amp;amp; scale &amp;gt; config.maxScale) {
            scale = config.maxScale;
        }

        if (config.minScale &amp;amp;&amp;amp; scale &amp;lt; config.minScale) {
            scale = config.minScale;
        }

        return scale;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;computeWindowScale函数根据「入参」与「浏览器窗口的宽高」，计算得出当前PPT（body&amp;gt;div#impress）节点的缩放倍数（transform:scale），具体的计算逻辑见上面代码的注释。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其他功能函数：（不重要，可直接略过）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var toNumber = function (numeric, fallback){&amp;hellip;}：将numeric转换成数字，如果无法转换则返回fallback&lt;/li&gt;
&lt;li&gt;translate、rotate、scale、perspective：根据参数返回拼装好的值，便于设置样式transform&lt;/li&gt;
&lt;li&gt;getElementFromHash：根据地址栏的hash值，返回id属性为该hash值的结点，其实就是找到当前的Page（还记得Page指什么吗~）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-校验浏览器的支持性&#34;&gt;3、校验浏览器的支持性&lt;/h3&gt;

&lt;p&gt;方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // CHECK SUPPORT
    var body = document.body;

    var ua = navigator.userAgent.toLowerCase();
    var impressSupported =
                          // browser should support CSS 3D transtorms
                           ( pfx(&amp;quot;perspective&amp;quot;) !== null ) &amp;amp;&amp;amp;

                          // and `classList` and `dataset` APIs
                           ( body.classList ) &amp;amp;&amp;amp;
                           ( body.dataset ) &amp;amp;&amp;amp;

                          // but some mobile devices need to be blacklisted,
                          // because their CSS 3D support or hardware is not
                          // good enough to run impress.js properly, sorry...
                           ( ua.search(/(iphone)|(ipod)|(android)/) === -1 );

    if (!impressSupported) {
        // we can&#39;t be sure that `classList` is supported
        body.className += &amp;quot; impress-not-supported &amp;quot;;
    } else {
        body.classList.remove(&amp;quot;impress-not-supported&amp;quot;);
        body.classList.add(&amp;quot;impress-supported&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;impress.js需要浏览器支持CSS 3D（根据是否支持perspective样式来判断，需要&amp;gt;=IE10，且IE全都不支持transform-style:preserve-3d），
DOM节点要有&lt;code&gt;classList&lt;/code&gt; 和 &lt;code&gt;dataset&lt;/code&gt; API，并且最后作者还任性的把几乎所有手机都排除了，不过也对，手机跑起这种页面会卡卡的根本没什么可Awesome的吧~&lt;/p&gt;

&lt;p&gt;如果不支持，那么为body的class属性增加值impress-not-supported，如果支持，则增加值impress-supported。&lt;/p&gt;

&lt;h3 id=&#34;4-全局对象-默认值&#34;&gt;4、全局对象&amp;amp;默认值&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;roots对象：初始值为空对象{}，里面包含了所有的impress实例（你可以在页面上生成多个impress实例，但没有任何意义）。最终这个对象里面会包含如下一些方法：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    // rootId就是PPT(body&amp;gt;div#impress)的id值，默认值自然就是impress了
    roots[ &amp;quot;impress-root-&amp;quot; + rootId ] = {

        //初始化。DOM结构上，Page(s)外面包裹了一个div
        init: init,

        //转到某一个Page，参数有：el（Page节点），duration（切换动画的毫秒数）
        goto: goto,

        //next与prev，都是基于goto实现的
        next: next,
        prev: prev
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;defaults对象，代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    var defaults = {
       width: 1024,
       height: 768,
       maxScale: 1,
       minScale: 0,

       perspective: 1000,

       transitionDuration: 1000
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还记得前面的computeWindowScale函数吗，这个函数的参数的默认值就是这个default（具体看下面代码），在实际运用中，该函数的参数取值为如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     var rootData = root.dataset;
     config = {
         width: toNumber( rootData.width, defaults.width ),
         height: toNumber( rootData.height, defaults.height ),
         maxScale: toNumber( rootData.maxScale, defaults.maxScale ),
         minScale: toNumber( rootData.minScale, defaults.minScale ),
         perspective: toNumber( rootData.perspective, defaults.perspective ),
         transitionDuration: toNumber( rootData.transitionDuration, defaults.transitionDuration )
     };
     computeWindowScale(config);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;root就是div#impress节点，假设root节点为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;div id=impress data-perspective=2000 data-width=1400 data-height=1000&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么root.dataset为：{perspective:2000, width: 1400, height: 1000}，所以可以通过更改#impress节点上的&lt;strong&gt;data-*&lt;/strong&gt;属性来改变computeWindowScale函数的入参，
 从而改变Page（单张演示文稿）占整个window视口的大小。&lt;/p&gt;

&lt;p&gt;PPT的缩放比例transform:scale由computeWindowScale函数计算得出，得出的结果还要除以当前Page的data-scale属性（也就是Page的放大倍数），以确保每张Page在展现出来的时候，所占屏幕的宽/高都是一样的。&lt;/p&gt;

&lt;h3 id=&#34;5-事件定义&#34;&gt;5、事件定义&lt;/h3&gt;

&lt;p&gt;前面有很长一段内容都说的自定义事件，作者在代码中定义了一些事件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;针对Page定义了两种事件：分别是：&lt;code&gt;impress:stepenter&lt;/code&gt;，当新的Page展示出来之后触发，注意该事件触发时Page切换的动画已经结束&lt;/li&gt;
&lt;li&gt;针对Page的另一个事件是：&lt;code&gt;impress:stepleave&lt;/code&gt;，当Page准备离开时触发，此时动画刚刚开始&lt;/li&gt;
&lt;li&gt;todo:未完待续&amp;hellip;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;6-init方法&#34;&gt;6、init方法：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置meta viewport，虽然在前面作者几乎排除了所有的移动端设备，但至少ipad还是可以的（屏幕又大，性能相对也比较好）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;初始化config参数（前面有提到），然后根据config计算PPT的scale缩放倍数：&lt;code&gt;windowScale = computeWindowScale( config );&lt;/code&gt;，使每张Page都呈现出来大小都是比较合适的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;「重要」&lt;/strong&gt;将所有Page的外面包裹一层div，该节点对应变量&lt;code&gt;canvas&lt;/code&gt;，这层div使用CSS 3D所必须的（至少按我的了解是这样），你可以看看我的&lt;a href=&#34;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%AD%A3%E6%96%B9%E4%BD%93.html&#34;&gt;这个例子&lt;/a&gt;，以及&lt;a href=&#34;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC.html&#34;&gt;这个&lt;/a&gt;，还有&lt;a href=&#34;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E7%BF%BB%E4%B9%A6.html&#34;&gt;这个&lt;/a&gt;，搭建一个完整的3D效果具体步骤如下（基本复述了前面原理部分讲过的内容）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最外层div（也就是#impress）声明视距（观察者的眼睛离屏幕的距离），也就是设置样式：transform:perspective(&lt;strong&gt;&lt;em&gt;px) 或者 perspective:&lt;/em&gt;&lt;/strong&gt;px；以及观察角度：perspective-origin&lt;/li&gt;
&lt;li&gt;第二层div（就是代码中新增的那层div）设置：transform-style:preserve-3d（IE不支持），声明这是一个画布，当然你也可以同时声明多个画布，可以通过设置画布的transform 3d属性来控制整个画布的3d变换&lt;/li&gt;
&lt;li&gt;第三层就可以写各种各样的3d模块了，它们都是按照以上的视距、观察角度来展示的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为#impress和内部第二层div设置基础样式：（root为#impress，canvas为第二层div）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  var rootStyles = {
      position: &amp;quot;absolute&amp;quot;,
      transformOrigin: &amp;quot;top left&amp;quot;,
      transition: &amp;quot;all 0s ease-in-out&amp;quot;,
      transformStyle: &amp;quot;preserve-3d&amp;quot;
  };

  css(root, rootStyles);
  css(root, {
      top: &amp;quot;50%&amp;quot;,
      left: &amp;quot;50%&amp;quot;,
      transform: perspective( config.perspective/windowScale ) + scale( windowScale )
  });
  css(canvas, rootStyles);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得注意的是root的transform属性，为了保证视距在各个Page看起来都是一致的，所以在将PPT缩放scale倍的同时，也需要将perspective进行scale倍的缩放&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;初始化所有Page（.step）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将Page上的属性（&lt;code&gt;&amp;lt;div class=step data-x=100 data-y=-100 data-scale=4 ...&amp;gt;&lt;/code&gt;）存储到&lt;code&gt;stepsData&lt;/code&gt;对象中，并根据Page上的属性，设置对应的样式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // get and init steps
  steps = $$(&amp;quot;.step&amp;quot;, root);
  steps.forEach( initStep );

  // `initStep` initializes given step element by reading data from its
  // data attributes and setting correct styles.
  var initStep = function ( el, idx ) {
      var data = el.dataset,
          step = {
              translate: {
                  x: toNumber(data.x),
                  y: toNumber(data.y),
                  z: toNumber(data.z)
              },
              rotate: {
                  x: toNumber(data.rotateX),
                  y: toNumber(data.rotateY),
                  z: toNumber(data.rotateZ || data.rotate)
              },
              scale: toNumber(data.scale, 1),
              el: el
          };

      if ( !el.id ) {
          el.id = &amp;quot;step-&amp;quot; + (idx + 1);
      }

      stepsData[&amp;quot;impress-&amp;quot; + el.id] = step;

      css(el, {
          position: &amp;quot;absolute&amp;quot;,
          transform: &amp;quot;translate(-50%,-50%)&amp;quot; +
                     translate(step.translate) +
                     rotate(step.rotate) +
                     scale(step.scale),
          transformStyle: &amp;quot;preserve-3d&amp;quot;
      });
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;初始化canvas的值
&amp;gt;canvas：#impress下一层div，它包裹着所有Pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们之所以能够看到3D环境中的每一个Page，就是要靠canvas通过各种transform 3d变换，来变换画布，使当前Page处于&lt;strong&gt;「正前方」&lt;/strong&gt;，再由PPT上的perspective和scale属性来把「镜头」拉近到Page跟前。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代码详细分析，未完待续&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JS中的事件循环与定时器</title>
      <link>https://blog.kaolafed.com/post/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Tue, 01 Dec 2015 16:48:59 &#43;0800</pubDate>
      <author>Alexander Ivanov</author>
      <guid>https://blog.kaolafed.com/post/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description>

&lt;h2 id=&#34;js中的事件循环与定时器&#34;&gt;JS中的事件循环与定时器&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;by tianyn1990&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;本文是在看过一些文章和视频之后，结合自己的理解，做的一个汇总，如果发现理解错误的地方，请及时指出便于更正。&lt;/em&gt; &lt;strong&gt;Orz&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;一-单线程&#34;&gt;一、单线程&lt;/h3&gt;

&lt;p&gt;javascript单线程执行，是由浏览器的场景决定的，避免了复杂的同步问题。HTML5提出「Web Worker」标准，允许js创建多个线程，但子线程仍受主线程控制，且不能操作DOM，js的本质未变。&lt;/p&gt;

&lt;h3 id=&#34;二-任务队列-事件循环&#34;&gt;二、任务队列 &amp;amp; 事件循环&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../images/taskqueue.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;任务分为：&lt;strong&gt;同步任务（synchronous）&lt;/strong&gt;、&lt;strong&gt;异步任务（asynchronous）&lt;/strong&gt;；同步任务被放入&lt;strong&gt;主线程&lt;/strong&gt;，异步任务放入&lt;strong&gt;任务队列（task queue）&lt;/strong&gt;。任务队列中的异步任务一旦运行有了结果，那么会在任务队列中放置一个对应的事件，当主线程中的同步任务全部执行完毕以后，会检查任务队列，将包含对应事件的异步任务放入主线程，然后主线程会执行所有任务，执行完毕以后再次检查task queue。这样不断循环的过程就叫做&lt;strong&gt;「event loop」&lt;/strong&gt;。（需要注意的是，loop的时间精度在4ms-16ms之间，oldIE会比较大，部分现代浏览器会判断pc是否外接电源来调整精确度）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;task queue中的「事件」包括：IO设备（keypress,network events like ajax&amp;hellip;）、鼠标点击、页面滚动等。事件被添加到主线程后，在下一个loop中执行的是该事件的「回调函数」，所以async task都有回调函数。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;task queue是「先进先出」队列结构，首先注册的事件第一个进入主线程等待执行。但「定时器」功能还会校验该事件的时间，到达时间后的async task才进入主线程。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../images/eventloop.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如上图，主线程的运行会产生&lt;strong&gt;「堆 heap」&lt;/strong&gt;和&lt;strong&gt;「栈 stack」&lt;/strong&gt;，&lt;strong&gt;「执行栈」&lt;/strong&gt;（主线程）中的代码可能会通过调用「WebAPIs」在task queue中创建async task，得到结果的async task会将「回调函数」放入callback queue中，并把相应事件放入task queue中，当「执行栈」中的代码执行完毕，就会依次将task queue中所有符合时间要求（定时器）的事件放入「执行栈」中，并在下一个event loop中执行对应的「回调函数」。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;三-定时器&#34;&gt;三、定时器&lt;/h3&gt;

&lt;h3 id=&#34;settimeout&#34;&gt;setTimeout&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;setTimeout 与 setInterval 实现原理一致，setTimeout(fn,0) 会将「事件」放入task queue的&lt;strong&gt;尾部&lt;/strong&gt;，在&lt;strong&gt;下一次loop&lt;/strong&gt;中，当「同步任务」与task queue中现有事件都执行完之后再执行。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;setTimeout存在&lt;strong&gt;「时间精度问题」&lt;/strong&gt;，至少在4ms以上，根据浏览器、设备是否插电源等有所不同，最多能达到近16ms。为了解决这个问题，加快响应速度，产生了&lt;strong&gt;「setImmediate API 与 setImmediate.js项目」&lt;/strong&gt;与&lt;strong&gt;「requestAnimationFrame」&lt;/strong&gt;，前者解决&lt;strong&gt;「触发之后，立即调用回调函数，希望延迟尽可能短」&lt;/strong&gt;的情况，后者可以实现&lt;strong&gt;「流畅的JS动画」（见下文）&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setinterval&#34;&gt;setInterval&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;setInterval如果使用「固定步长」（间隔时间为定值），例如200ms，那么它可能会在距离js执行开始的205ms，405ms，605ms&amp;hellip;时将「事件」放入task queue中的末尾等待执行。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h4 id=&#34;问题一&#34;&gt;问题一：&lt;/h4&gt;

&lt;p&gt;如果主线程（或执行栈）中的任务与task queue中的其它任务再加上setInterval中的回调函数的总执行时间超过了「固定步长」（200ms），那么setInterval的回调函数就会「延后执行」，浏览器会保证&lt;strong&gt;「当任务队列中没有定时器的任何其它代码实例时，才将新的定时器添加到任务队列」&lt;/strong&gt;，长时间运行就会产生大量「积压」在内存中待执行的函数，如果主线程终于空闲下来，那么就会立刻执行&lt;strong&gt;「积压」&lt;/strong&gt;的大量函数，中间不会有任何停顿。那么真正的执行时间可能就变成了（假设主线程执行时间每loop固定为300ms）：305ms、605ms、605ms、905ms、1205ms、1205ms&amp;hellip;就会产生&lt;strong&gt;「跳帧」&lt;/strong&gt;。例子如下：（补充：&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Code_snippets/Timers&#34;&gt;Date.now&lt;/a&gt; IE9以上支持，相对new Date()来说减少创建一次对象的时间和内存）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	var i = 0, itv;
	(function btnclick(){
		itv = setInterval(function(){
			console.log(&#39;run:&#39;+i++);
			var start = Date.now();
			while(Date.now() - start &amp;lt; 2000) {}
		}, 500);
	})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;但在试验中（ff，chrome，safari），只有firefox发生了「积压」效果&lt;/strong&gt;，具体表现为：会有几个「run:i」同时打印到控制台。推测是webkit内核对这块做了优化。如果一定要使用setInterval的话，问题一（避免事件积压）的解决办法有（摘自『javascript高级程序设计』）：&lt;br /&gt;
(1) 间隔时间使用百分比: 开始值 + (目标值 - 开始值) * （Date.now() - 开始时间）/ 时间区间；&lt;br /&gt;
(2) 使用链式setTimeout；&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&#34;问题二&#34;&gt;问题二：&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;「setTimeout同样有这个问题！」&lt;/strong&gt;通过切换标签页等操作让页面在后台运行，循环仍在继续，只是「时间间隔变长」了而已。另外，当动画发生在页面viewport可视区域以外的时候，中断动画运行，才是性能更优的选择（raf就是如此）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h4 id=&#34;问题三&#34;&gt;问题三：&lt;/h4&gt;

&lt;p&gt;在使用setTimeout制作JS动画的时候，时间间隔是不好把握的，如果假设某浏览器的渲染速率为60Hz，那么就是16又2/3毫秒渲染一次，为了匹配这个速率，我们需要确保「setTimeout中设定的时间间隔」+「回调函数执行时间」+「在显示器上绘制/改变动画的下一帧的时间」刚好等于「16 2/3ms」，假设3者相加时间为15ms，那么每10『(16 &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) / ((16 &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)- 15)=10』帧会多出一帧来，那么结果就是在第10帧的时候，动画函数连续执行了两次，于是动画不再平滑了&amp;hellip;（详见&lt;a href=&#34;https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html&#34;&gt;这篇啰嗦的文章&lt;/a&gt;），更不要说还要考虑setTimeout的「时间精度」问题（4ms 一次 event loop，也即是最少4ms才检查一次setTimeout的时间是否达到）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;requestanimationframe&#34;&gt;requestAnimationFrame&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在&lt;strong&gt;「一次重绘或回流中就完成」&lt;/strong&gt;，并且&lt;strong&gt;「重绘或回流的时间间隔紧紧跟随浏览器的刷新频率」&lt;/strong&gt;，一般来说，这个频率为每秒60帧。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的的cpu，gpu和内存使用量。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    var i = 0, _load = +new Date(), loop = 1000/60;
    function f(){
        var _now = +new Date();
        console.log(i++, (_now-_load)/loop);
        _load = _now;
        requestAnimationFrame(f);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;与setTimeout相比，requestAnimationFrame不是自己指定回调函数运行的时间，而是跟着浏览器内建的刷新频率来执行回调，这当然就能达到浏览器所能实现动画的最佳效果了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但另外一方面，requestAnimationFrame的预期执行时间要比setTimeout要长，因为setTimeout的最小执行时间是由「第7点：浏览器的时间精度」决定的，但raf会跟随浏览器DOM的刷新频率来执行，理论为16 2/3ms。但是，&lt;strong&gt;在setTimeout中如果进行了DOM操作（尤其是产生了重绘）通常不会立即执行，而是等待浏览器内建刷新时才执行&lt;/strong&gt;。因此对于「动画」来说的话，raf要远远比setTimeout适合得多。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;rAF与setTimeout性能比较：（据某些人说，早期的raf性能堪忧，尤其是在手机上，反而不如setTimeout）&lt;br /&gt;
&lt;strong&gt;macbook pro chrome 46.0.2490.86 (64-bit)：&lt;/strong&gt;&lt;br /&gt;
(1) setTimeout用时：37280ms&lt;br /&gt;
(2) raf用时：       18360ms&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;setTimeout:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var raf, i= 1, body = document.querySelector(&#39;body&#39;);
    body.innerHTML = &#39;&amp;lt;div id=&amp;quot;sq&amp;quot; style=&amp;quot;position:fixed;width:30px;height:30px;top:50px;left:50px;background:red;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;;
    var sq = document.querySelector(&amp;quot;#sq&amp;quot;);
    var pause = 10;//回调函数执行时间
    var _load = +new Date();
    var t = 1000/60;
    function run1(){
        i++;
        sq.style.left = sq.offsetLeft + 1 + &#39;px&#39;;
        var start = Date.now();
        while(Date.now() - start &amp;lt; pause) {}
        if(i == 1000){
            console.log(Date.now() - _load);
        }
        raf = setTimeout(run1, t);
    }
    function stop(){
        clearTimeout(raf);
    }
    //37280
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;rAF:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var raf, i= 1, body = document.querySelector(&#39;body&#39;);
    body.innerHTML = &#39;&amp;lt;div id=&amp;quot;sq&amp;quot; style=&amp;quot;position:fixed;width:30px;height:30px;top:50px;left:50px;background:red;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;;
    var sq = document.querySelector(&amp;quot;#sq&amp;quot;);
    var pause = 10;//回调函数执行时间
    var _load = +new Date();
    function run(){
        i++;
        sq.style.left = sq.offsetLeft + 1 + &#39;px&#39;;
        var start = Date.now();
        while(Date.now() - start &amp;lt; pause) {}
        if(i == 1000){
            console.log(Date.now() - _load);
        }
        raf = requestAnimationFrame(run);
    }
    function stop(){
        cancelAnimationFrame(raf);
    }
    //18360

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;由于requestAnimationFrame的特性之一：会把每一帧中的所有DOM操作集中起来，在「一次重绘或回流中就完成」。因此有github项目fastdom，我会在另一篇文章中详细分析fastdom的实现思路与代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;四-更快的异步执行&#34;&gt;四、更快的异步执行&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;不是为了「动画」，而是单纯的希望最快速的执行异步回调：&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;使用异步函数-settimeout-raf-setimmediate&#34;&gt;使用异步函数：setTimeout、raf、setImmediate：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;setTimeout会有「时间精度问题」，经过本地试验，chrome用时约1.5ms（连接电源）、safari用时约5ms、firefox用时约0.3ms（为何这么快&amp;hellip;）&lt;/li&gt;
&lt;li&gt;raf会跟随浏览器内置重绘页面的频率，约60Hz，理论上平均时间为：1000/60/2ms，chrome上测试：第一次时间多在1ms内，第二次调用时间大于10ms。&lt;/li&gt;
&lt;li&gt;setImmediate：仅IE10支持，尚未成为标准。但nodeJS已经支持并推荐使用此方法。另外，github上有&lt;a href=&#34;https://github.com/YuzuJS/setImmediate/blob/master/README.md&#34;&gt;setImmediate.js项目&lt;/a&gt;，用其它方法实现了setImmediate功能&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;测试：&lt;br /&gt;
&lt;strong&gt;setTimeout:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var now = function(){
        return performance ? performance.now() : +new Date();
    };
    var i = now();
    setTimeout(function(){
        setTimeout(function(){
            console.log(now()-j);
        },0);
        var j = now();
        console.log(j-i);
    },0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;raf:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var now = function(){
        return performance ? performance.now() : +new Date();
    };
    var i = now();
    requestAnimationFrame(function(){
        requestAnimationFrame(function(){
            console.log(now()-j);
        });
        var j = now();
        console.log(j-i);
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;其它方式实现异步调用&#34;&gt;其它方式实现异步调用：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;onmessage：和iframe通信时常常会使用到onmessage方法，但是如果同一个window postMessage给自身，其实也相当于异步执行了一个function。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    var doSth = function(){};
    window.addEventListener(&amp;quot;message&amp;quot;, doSth, true);
    window.postMessage(&amp;quot;&amp;quot;, &amp;quot;*&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;另外，还可以利用script标签，实现函数异步执行（把script添加到文档也会执行onreadystatechange 但是该方法只能在IE下浏览器里使用），例如：&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    var newScript = document.createElement(&amp;quot;script&amp;quot;);
    newScript.onreadystatechange = doSth;
    document.documentElement.appendChild(newScript);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理论上，执行回调函数的等待时间排序：&lt;br /&gt;
&lt;strong&gt;setImmediate &amp;lt; readystatechange &amp;lt; onmessage &amp;lt; setTimeout 0 &amp;lt; requestAnimationFrame&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;另外，在&lt;strong&gt;「&lt;a href=&#34;https://github.com/YuzuJS/setImmediate/blob/master/README.md&#34;&gt;setImmediate.js项目&lt;/a&gt;」&lt;/strong&gt;中说了它的实现策略，对上文进行一个有力的补充：&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;## The Tricks

### `process.nextTick`

In Node.js versions below 0.9, `setImmediate` is not available, but [`process.nextTick`][nextTick] is—and in those versions, `process.nextTick` uses macrotask semantics. So, we use it to shim support for a global `setImmediate`.

In Node.js 0.9 and above, `process.nextTick` moved to microtask semantics, but `setImmediate` was introduced with macrotask semantics, so there&#39;s no need to polyfill anything.

Note that we check for *actual* Node.js environments, not emulated ones like those produced by browserify or similar. Such emulated environments often already include a `process.nextTick` shim that&#39;s not as browser-compatible as setImmediate.js.

### `postMessage`

In Firefox 3+, Internet Explorer 9+, all modern WebKit browsers, and Opera 9.5+, [`postMessage`][postMessage] is available and provides a good way to queue tasks on the event loop. It&#39;s quite the abuse, using a cross-document messaging protocol within the same document simply to get access to the event loop task queue, but until there are native implementations, this is the best option.

Note that Internet Explorer 8 includes a synchronous version of `postMessage`. We detect this, or any other such synchronous implementation, and fall back to another trick.

### `MessageChannel`

Unfortunately, `postMessage` has completely different semantics inside web workers, and so cannot be used there. So we turn to [`MessageChannel`][MessageChannel], which has worse browser support, but does work inside a web worker.

### `&amp;lt;script&amp;gt; onreadystatechange`

For our last trick, we pull something out to make things fast in Internet Explorer versions 6 through 8: namely, creating a `&amp;lt;script&amp;gt;` element and firing our calls in its `onreadystatechange` event. This does execute in a future turn of the event loop, and is also faster than `setTimeout(…, 0)`, so hey, why not?

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setimmediate-api-未完待续&#34;&gt;setImmediate API：未完待续&amp;hellip;&lt;/h3&gt;

&lt;h3 id=&#34;部分参考资料&#34;&gt;部分参考资料：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;JavaScript 运行机制详解：再谈Event Loop
&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&#34;&gt;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&lt;/a&gt;
—相关视频：Help, I&amp;rsquo;m stuck in an event-loop  &lt;a href=&#34;https://vimeo.com/96425312&#34;&gt;https://vimeo.com/96425312&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更快的异步执行
&lt;a href=&#34;http://www.alloyteam.com/2014/03/faster-asynchronous-execution/&#34;&gt;http://www.alloyteam.com/2014/03/faster-asynchronous-execution/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable REQUEST_ANIMATION_FRAME on all ports?
&lt;a href=&#34;https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html&#34;&gt;https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;拥有更好性能的requesAnimationFrame
&lt;a href=&#34;http://sentsin.com/web/949.html&#34;&gt;http://sentsin.com/web/949.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;性能更好的js动画实现方式——requestAnimationFrame
&lt;a href=&#34;http://www.cnblogs.com/2050/p/3871517.html&#34;&gt;http://www.cnblogs.com/2050/p/3871517.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
